// Generated by gencpp from file campus/NavigationRequestRequest.msg
// DO NOT EDIT!


#ifndef CAMPUS_MESSAGE_NAVIGATIONREQUESTREQUEST_H
#define CAMPUS_MESSAGE_NAVIGATIONREQUESTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campus
{
template <class ContainerAllocator>
struct NavigationRequestRequest_
{
  typedef NavigationRequestRequest_<ContainerAllocator> Type;

  NavigationRequestRequest_()
    : visitor_name()
    , host_name()
    , building()  {
    }
  NavigationRequestRequest_(const ContainerAllocator& _alloc)
    : visitor_name(_alloc)
    , host_name(_alloc)
    , building(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _visitor_name_type;
  _visitor_name_type visitor_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _host_name_type;
  _host_name_type host_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _building_type;
  _building_type building;





  typedef boost::shared_ptr< ::campus::NavigationRequestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campus::NavigationRequestRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationRequestRequest_

typedef ::campus::NavigationRequestRequest_<std::allocator<void> > NavigationRequestRequest;

typedef boost::shared_ptr< ::campus::NavigationRequestRequest > NavigationRequestRequestPtr;
typedef boost::shared_ptr< ::campus::NavigationRequestRequest const> NavigationRequestRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campus::NavigationRequestRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campus::NavigationRequestRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campus::NavigationRequestRequest_<ContainerAllocator1> & lhs, const ::campus::NavigationRequestRequest_<ContainerAllocator2> & rhs)
{
  return lhs.visitor_name == rhs.visitor_name &&
    lhs.host_name == rhs.host_name &&
    lhs.building == rhs.building;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campus::NavigationRequestRequest_<ContainerAllocator1> & lhs, const ::campus::NavigationRequestRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campus

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campus::NavigationRequestRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campus::NavigationRequestRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus::NavigationRequestRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus::NavigationRequestRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus::NavigationRequestRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus::NavigationRequestRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campus::NavigationRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab65d6ac818cfafd32c8fec858fa616b";
  }

  static const char* value(const ::campus::NavigationRequestRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab65d6ac818cfafdULL;
  static const uint64_t static_value2 = 0x32c8fec858fa616bULL;
};

template<class ContainerAllocator>
struct DataType< ::campus::NavigationRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campus/NavigationRequestRequest";
  }

  static const char* value(const ::campus::NavigationRequestRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campus::NavigationRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request part\n"
"string visitor_name\n"
"string host_name\n"
"string building\n"
;
  }

  static const char* value(const ::campus::NavigationRequestRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campus::NavigationRequestRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.visitor_name);
      stream.next(m.host_name);
      stream.next(m.building);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationRequestRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campus::NavigationRequestRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campus::NavigationRequestRequest_<ContainerAllocator>& v)
  {
    s << indent << "visitor_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.visitor_name);
    s << indent << "host_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.host_name);
    s << indent << "building: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.building);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUS_MESSAGE_NAVIGATIONREQUESTREQUEST_H
