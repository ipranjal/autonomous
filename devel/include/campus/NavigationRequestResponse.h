// Generated by gencpp from file campus/NavigationRequestResponse.msg
// DO NOT EDIT!


#ifndef CAMPUS_MESSAGE_NAVIGATIONREQUESTRESPONSE_H
#define CAMPUS_MESSAGE_NAVIGATIONREQUESTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campus
{
template <class ContainerAllocator>
struct NavigationRequestResponse_
{
  typedef NavigationRequestResponse_<ContainerAllocator> Type;

  NavigationRequestResponse_()
    : navigation_path()  {
    }
  NavigationRequestResponse_(const ContainerAllocator& _alloc)
    : navigation_path(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _navigation_path_type;
  _navigation_path_type navigation_path;





  typedef boost::shared_ptr< ::campus::NavigationRequestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campus::NavigationRequestResponse_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationRequestResponse_

typedef ::campus::NavigationRequestResponse_<std::allocator<void> > NavigationRequestResponse;

typedef boost::shared_ptr< ::campus::NavigationRequestResponse > NavigationRequestResponsePtr;
typedef boost::shared_ptr< ::campus::NavigationRequestResponse const> NavigationRequestResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campus::NavigationRequestResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campus::NavigationRequestResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campus::NavigationRequestResponse_<ContainerAllocator1> & lhs, const ::campus::NavigationRequestResponse_<ContainerAllocator2> & rhs)
{
  return lhs.navigation_path == rhs.navigation_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campus::NavigationRequestResponse_<ContainerAllocator1> & lhs, const ::campus::NavigationRequestResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campus

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campus::NavigationRequestResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campus::NavigationRequestResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus::NavigationRequestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus::NavigationRequestResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus::NavigationRequestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus::NavigationRequestResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campus::NavigationRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9261615c63201e97c01e9db2b0cb3c1";
  }

  static const char* value(const ::campus::NavigationRequestResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9261615c63201e9ULL;
  static const uint64_t static_value2 = 0x7c01e9db2b0cb3c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::campus::NavigationRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campus/NavigationRequestResponse";
  }

  static const char* value(const ::campus::NavigationRequestResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campus::NavigationRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response part\n"
"string navigation_path\n"
"\n"
;
  }

  static const char* value(const ::campus::NavigationRequestResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campus::NavigationRequestResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.navigation_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationRequestResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campus::NavigationRequestResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campus::NavigationRequestResponse_<ContainerAllocator>& v)
  {
    s << indent << "navigation_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.navigation_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUS_MESSAGE_NAVIGATIONREQUESTRESPONSE_H
